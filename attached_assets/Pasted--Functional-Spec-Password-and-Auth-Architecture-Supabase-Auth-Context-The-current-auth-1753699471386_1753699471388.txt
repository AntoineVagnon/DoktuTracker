# Functional Spec — Password and Auth Architecture (Supabase Auth)

## Context  
The current authentication system uses **Supabase Auth** to manage user sign-up, login, and password handling.  
However, the local `users` table also contains a `password_hash` column, which creates confusion and risk of faulty logic or duplicate flows.

## Problem  
- The `users.password_hash` field is obsolete and misleading.  
- Some user accounts (especially test accounts) were manually inserted in the DB with a local password hash.  
- Users created via Supabase Auth (correct method) have `password_hash = NULL` in the local table, which is normal.  
- Backend logic may mistakenly rely on `users.password_hash`, causing login errors or misidentification.  
- Example: Doctor accounts created only in the local DB cannot log in, because they are missing from Supabase Auth.

## Expected architecture

| Responsibility       | Managed by         | Details |
|----------------------|--------------------|---------|
| Password + session   | Supabase Auth      | Secure, opaque, never exposed in DB |
| User metadata        | `users` table      | Stores `id`, `email`, `role`, etc. (linked via Supabase Auth UID) |

## Requirements  

### ✅ Remove legacy password field  
- Delete the `password_hash` column from the `users` table in `schema.ts`  
- Run migration to apply this removal to the database  

### ✅ Ensure all users exist in both systems  
- Every user in Supabase Auth must have a corresponding row in the `users` table with the correct `id` (UUID from Supabase)  
- On sign-up, auto-create this metadata entry  
- Ensure seed scripts also create accounts via Supabase Auth, not just local DB

### ✅ Backend login logic must rely only on Supabase Auth  
- Do not check `users.password_hash`  
- Rely on Supabase Auth tokens (JWT) to validate the session and identity  
- On login: fetch metadata from `users` using Supabase Auth’s user ID

## Outcome  
- Passwords are handled securely via Supabase  
- Login works consistently for all user roles (patient, doctor, admin)  
- No legacy or conflicting logic exists in the backend  
- Supabase remains the single source of truth for authentication
